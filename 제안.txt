1. 멀티프로세싱을 활용한 작업 분배 
Demucs 자체적으로 제공하는 -j 옵션 외에도, Python의 multiprocessing 라이브러리를 활용해 더 세밀한 작업 분배가 가능합니다.
이전처럼 단순히 파일 단위로 병렬 처리하는 대신, 작업 단계를 세분화하여 병렬화 수준을 높일 수 있습니다.

- 먼저 2개의 mp3 파일로 비교
ㄴ음악 파일마다의 크기가 다르면 demucs의 --jobs를 쓰는 것이 유리할 수 있다.
ㄴ음악 파일을 일정 크기로 분할 한 후 병렬 처리 하는 것이 평등할 것으로 생각한다

멀티프로세싱 활용 한 것 = Total processing time: 552.46 seconds
demucs의 jobs=2로 한 것 = Total processing time: 476.55 seconds

2. 오디오 청크 분할 + 병렬 처리
긴 오디오 파일을 처리할 때 Demucs가 하나의 프로세스로 처리하는 시간이 길어질 수 있습니다. 이를 해결하기 위해, 오디오 파일을 일정한 길이로 분할하고 청크 단위로 병렬 처리한 후, 결과를 다시 병합합니다.

구현 단계
오디오 파일 분할: ffmpeg를 사용.
분할된 청크 병렬 처리: multiprocessing.Pool 사용.
처리된 청크 병합.
- 먼저 1개의 mp3 파일로 비교

청크 5개로 분할 한 것 = Total processing time: 115.27 seconds
demucs의 jobs=5로 한 것 = Total processing time: 104.06 seconds

3. 미리 wav변환 시키기
wav 변환 시킨 것 = Total processing time: 333.66 seconds
그냥 돌린 것 = Total processing time: 333.59 seconds

3. 데이터 파이프라인 병렬 처리
Demucs의 전처리 및 후처리 단계에서 다음을 고려:

입력 파일 변환 (e.g., mp3 → wav) 병렬화.
출력 파일 병합 및 변환 (e.g., wav → mp3) 병렬화.
이 작업들을 동시에 수행하는 파이프라인 구조를 만들면 I/O 지연을 줄일 수 있습니다.

- 먼저 2개의 mp3 파일로 비교


다 해보고 나서 20개 파일에 대해 테스트 해보기